// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CheetahDigitalOffers
import AVFoundation
import CheetahDigitalCore
import CheetahDigitalUI
import CheetahDigitalUtils
import Foundation
import Swift
import UIKit
import _Concurrency
public enum OffersNotification : CheetahDigitalUtils.CheetahNotification {
  case offerDoneClipping
  case offerIsClipping
  case offerResponseDoneClipping
  case offerResponseIsClipping
  public var name: Swift.String {
    get
  }
  public static func == (a: CheetahDigitalOffers.OffersNotification, b: CheetahDigitalOffers.OffersNotification) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Notification {
  public enum CheetahDigitalOffers {
    public static func offerDoneClipping() -> Foundation.Notification
    public static func offerIsClipping() -> Foundation.Notification
    public static func offerResponseDoneClipping() -> Foundation.Notification
    public static func offerResponseIsClipping() -> Foundation.Notification
  }
}
public enum OfferUIFactory {
  public static func detail(id: Swift.Int, delegate: CheetahDigitalOffers.OfferDetailDelegate? = nil) -> CheetahDigitalOffers.OfferDetailViewController
  public static func carousel(detailDelegate: CheetahDigitalOffers.OfferDetailDelegate? = nil) -> CheetahDigitalUI.CollectionViewController
  public static func couponClippedList(detailDelegate: CheetahDigitalOffers.OfferDetailDelegate? = nil) -> CheetahDigitalUI.CollectionViewController
  public static func couponList(detailDelegate: CheetahDigitalOffers.OfferDetailDelegate? = nil) -> CheetahDigitalUI.CollectionViewController
  public static func list(detailDelegate: CheetahDigitalOffers.OfferDetailDelegate? = nil) -> CheetahDigitalUI.CollectionViewController
  public static func responseDetail(id: Swift.Int, delegate: CheetahDigitalOffers.OfferDetailDelegate? = nil) -> CheetahDigitalOffers.OfferDetailViewController
  public static func responseList(detailDelegate: CheetahDigitalOffers.OfferDetailDelegate? = nil) -> CheetahDigitalUI.CollectionViewController
  public static func segmentedCoupon(detailDelegate: CheetahDigitalOffers.OfferDetailDelegate? = nil) -> CheetahDigitalUI.SegmentedViewController
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OfferResponseListController : CheetahDigitalUI.ListCollectionController<CheetahDigitalCore.Offer.Response> {
  @_Concurrency.MainActor(unsafe) open var loadParameters: CheetahDigitalUtils.Parameters
  @_Concurrency.MainActor(unsafe) open var detailDelegate: CheetahDigitalOffers.OfferDetailDelegate?
  @_Concurrency.MainActor(unsafe) override open func loadContent()
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func updateWith(_ result: Swift.Result<CheetahDigitalCore.APIResponse<[CheetahDigitalCore.Offer.Response]>, Swift.Error>)
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) override public init(collectionView: UIKit.UICollectionView? = nil)
  @objc deinit
}
@_Concurrency.MainActor(unsafe) open class OfferCouponListController : CheetahDigitalOffers.OfferListController {
  @_Concurrency.MainActor(unsafe) open var clippingObserver: ObjectiveC.NSObjectProtocol?
  @_Concurrency.MainActor(unsafe) open var doneClippingObserver: ObjectiveC.NSObjectProtocol?
  @_Concurrency.MainActor(unsafe) open var clippingIndexPaths: [Foundation.IndexPath]
  @_Concurrency.MainActor(unsafe) open func isClippingNotification(_ notification: Foundation.Notification)
  @_Concurrency.MainActor(unsafe) open func doneClippingNotification(_ notification: Foundation.Notification)
  @objc override dynamic public init()
  @objc deinit
  @_Concurrency.MainActor(unsafe) override open func loadContent()
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OfferCouponClippedListController : CheetahDigitalOffers.OfferCouponListController {
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) override open func doneClippingNotification(_ notification: Foundation.Notification)
  @objc deinit
}
public protocol OfferCarouselDelegate {
  func offerCarouselContentDidLoad(_ controller: CheetahDigitalOffers.OfferCarouselController)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OfferCarouselController : CheetahDigitalUI.CarouselCollectionController<CheetahDigitalCore.Offer> {
  @_Concurrency.MainActor(unsafe) open var delegate: CheetahDigitalOffers.OfferCarouselDelegate?
  @_Concurrency.MainActor(unsafe) open var detailDelegate: CheetahDigitalOffers.OfferDetailDelegate?
  @_Concurrency.MainActor(unsafe) open var autoScrollTimeInterval: Swift.Double
  @_Concurrency.MainActor(unsafe) open var loadParameters: CheetahDigitalUtils.Parameters
  @objc deinit
  @_Concurrency.MainActor(unsafe) override open func loadContent()
  @_Concurrency.MainActor(unsafe) open func updateWith(_ result: Swift.Result<CheetahDigitalCore.APIResponse<[CheetahDigitalCore.Offer]>, Swift.Error>)
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func autoScroll()
  @_Concurrency.MainActor(unsafe) open func stopAutoScroll()
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) override public init(collectionView: UIKit.UICollectionView? = nil)
}
public struct OfferCouponSegmentedController : CheetahDigitalUI.SegmentedController {
  public var navigationItemTitle: Swift.String?
  public let segments: [UIKit.UIViewController]
  public init(detailDelegate: CheetahDigitalOffers.OfferDetailDelegate? = nil)
  public func numberOfSegments() -> Swift.Int
  public func viewControllerForSegment(atIndex index: Swift.Int) -> UIKit.UIViewController?
  public func titleForSegment(atIndex index: Swift.Int) -> Swift.String?
  public func didSelectSegment(atIndex index: Swift.Int, of segmentedViewController: CheetahDigitalUI.SegmentedViewController)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OfferListController : CheetahDigitalUI.ListCollectionController<CheetahDigitalCore.Offer> {
  @_Concurrency.MainActor(unsafe) open var loadParameters: CheetahDigitalUtils.Parameters
  @_Concurrency.MainActor(unsafe) open var detailDelegate: CheetahDigitalOffers.OfferDetailDelegate?
  @_Concurrency.MainActor(unsafe) override open func loadContent()
  @_Concurrency.MainActor(unsafe) @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) open func updateWith(_ result: Swift.Result<CheetahDigitalCore.APIResponse<[CheetahDigitalCore.Offer]>, Swift.Error>)
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) override public init(collectionView: UIKit.UICollectionView? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OfferDetailViewController : CheetahDigitalUI.DetailViewController {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var buttonStackView: UIKit.UIStackView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var readMoreButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var barcodeStackView: UIKit.UIStackView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var barcodeImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var barcodeLabel: UIKit.UILabel!
  @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) override public init(nibName: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override public init(controller: CheetahDigitalUI.ContentController?, loading: CheetahDigitalUI.LoadableViewController? = nil, empty: CheetahDigitalUI.ReloadableViewController? = nil, error: CheetahDigitalUI.ReloadableViewController? = nil)
  @_Concurrency.MainActor(unsafe) override public init(detailController: CheetahDigitalUI.DetailController, isRefreshable: Swift.Bool = super)
  @objc deinit
}
@_inheritsConvenienceInitializers open class OfferResponseDetailController : CheetahDigitalOffers.OfferDetailController {
  override open var isClippable: Swift.Bool {
    get
  }
  override open func loadContent()
  override open func setupObservers()
  override open func setupClipRightBarButtonItem()
  @objc override open func clipButtonPressed(_ sender: Any)
  override public init(id: Swift.Int)
  @objc deinit
}
public protocol OfferDetailPresentable : CheetahDigitalUI.DetailPresentable {
  var detailReadMoreButtonTitle: Swift.String { get }
}
public protocol OfferDetailDelegate : AnyObject {
  func share(url: Foundation.URL, description: Swift.String, with offer: CheetahDigitalCore.Offer, from viewController: UIKit.UIViewController, completion: (() -> Swift.Void)?)
  func open(url: Foundation.URL, of offer: CheetahDigitalCore.Offer, completion: (() -> Swift.Void)?)
  func setupBarcode(stackView: UIKit.UIStackView, imageView: UIKit.UIImageView, label: UIKit.UILabel, of offer: CheetahDigitalCore.Offer)
}
open class OfferDetailController : CheetahDigitalUI.BaseDetailController {
  weak open var offerDetailDelegate: CheetahDigitalOffers.OfferDetailDelegate?
  open var id: Swift.Int
  open var parameters: CheetahDigitalUtils.Parameters
  open var isClippable: Swift.Bool {
    get
  }
  open var isClipping: Swift.Bool
  open var clippingObserver: ObjectiveC.NSObjectProtocol?
  open var doneClippingObserver: ObjectiveC.NSObjectProtocol?
  public init(id: Swift.Int)
  @objc deinit
  open func setupObservers()
  open func setupClipRightBarButtonItem()
  open func setupBarcodeIfNeeded()
  open func setupActionButtons()
  override open func setupDetails()
  override open func loadContent()
  override open func refreshContent()
  open func updateWith<T>(_ result: Swift.Result<CheetahDigitalCore.APIResponse<T>, Swift.Error>)
  override open func actionButtonPressed(_ actionButton: UIKit.UIButton)
  @objc open func readMoreButtonPressed(_ readMoreButton: UIKit.UIButton)
  @objc open func clipButtonPressed(_ sender: Any)
  open func isClippingNotification(_ notification: Foundation.Notification)
  open func doneClippingNotification(_ notification: Foundation.Notification)
}
extension CheetahDigitalOffers.OffersNotification : Swift.Equatable {}
extension CheetahDigitalOffers.OffersNotification : Swift.Hashable {}
