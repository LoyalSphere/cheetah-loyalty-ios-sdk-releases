// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CheetahLoyaltyOloUI
import CheetahLoyaltyOloCore
@_exported import CheetahLoyaltyOloUI
import CheetahLoyaltyUI
import CheetahLoyaltyUtils
import Foundation
import MapKit
import Swift
import UIKit
@_inheritsConvenienceInitializers open class ProductCategoriesCollectionController : CheetahLoyaltyUI.ListCollectionController<CheetahLoyaltyOloCore.Product.Category>, UIKit.UICollectionViewDelegateFlowLayout {
  open var imagePath: Swift.String?
  open var imageGroupName: Swift.String
  override open func loadContent()
  override open var collectionViewLayout: UIKit.UICollectionViewLayout {
    get
  }
  override open func registerComponents()
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
}
public enum OrderProgressSavedData {
  public static var restaurantId: Swift.Int {
    get
    set
  }
  public static var restaurantName: Swift.String {
    get
    set
  }
  public static var restaurantStoreName: Swift.String {
    get
    set
  }
  public static var basketId: Swift.String {
    get
    set
  }
  public static var supportsSpecialInstructions: Swift.Bool {
    get
    set
  }
}
@_inheritsConvenienceInitializers open class RedeemCouponViewController : CheetahLoyaltyUI.NibViewController, CheetahLoyaltyUI.AlertEmbeddableViewController {
  @objc @IBOutlet weak public var headingLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var couponCodeFloatingTextField: CheetahLoyaltyUI.FloatingTextField!
  @objc @IBOutlet weak public var applyCouponButton: UIKit.UIButton!
  @objc @IBOutlet weak public var closeButton: UIKit.UIButton!
  public var delegate: CheetahLoyaltyUI.AlertEmbeddableViewControllerDelegate?
  @objc override dynamic open func viewDidLoad()
  open func setupLabel()
  open func setupFloatingTextField()
  open func setupButtons()
  @objc deinit
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol BillingAccountCellDelegate {
  func billingAccountDeleted(_ cell: CheetahLoyaltyOloUI.BillingAccountCollectionViewCell)
  func amountTextFieldDidEndEditing(_ textField: UIKit.UITextField, parent cell: CheetahLoyaltyOloUI.BillingAccountCollectionViewCell)
}
@objc @_inheritsConvenienceInitializers open class BillingAccountCollectionViewCell : UIKit.UICollectionViewCell, UIKit.UITextFieldDelegate {
  @objc override dynamic open func awakeFromNib()
  @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc open func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class OfferListCollectionController : CheetahLoyaltyUI.ListCollectionController<CheetahLoyaltyOloCore.Loyalty.Reward> {
  override open func registerComponents()
  override open func loadContent()
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc deinit
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
}
@objc @_inheritsConvenienceInitializers open class CheckBoxCollectionViewCell : UIKit.UICollectionViewCell {
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class ProductOptionsCollectionController : CheetahLoyaltyUI.BaseCollectionController<CheetahLoyaltyOloCore.Product.OptionGroup>, UIKit.UICollectionViewDelegateFlowLayout {
  open var unselectedMandatoryFields: [Swift.Int] {
    get
    set
  }
  open var collectionViewWidth: CoreGraphics.CGFloat {
    get
  }
  open func updateCollection(with newItems: [CheetahLoyaltyOloCore.Product.OptionGroup])
  open func setMandatoryFields()
  open func enableActionButton()
  override open func registerComponents()
  open func totalSection() -> Swift.Int
  @objc override open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc deinit
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
}
@_inheritsConvenienceInitializers open class ProductCategoriesViewController : CheetahLoyaltyOloUI.FooterButtonCollectionViewController {
  @objc @IBOutlet public var storeSeparatorView: UIKit.UIView!
  @objc @IBOutlet public var storeLabelView: UIKit.UIView!
  @objc @IBOutlet public var storeLabel: UIKit.UILabel!
  @objc @IBOutlet public var caretRightImageView: UIKit.UIImageView!
  open var showCurrentRestaurant: Swift.Bool
  @objc deinit
  override open func setup()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
}
@objc @_inheritsConvenienceInitializers open class ProductInstructionsCollectionViewCell : UIKit.UICollectionViewCell, UIKit.UITextViewDelegate {
  @objc @IBOutlet public var instructionsTextView: UIKit.UITextView!
  open var didUpdateInstructions: ((Swift.String) -> Swift.Void)?
  @objc override dynamic open func awakeFromNib()
  @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class ProductCategoryCollectionViewCell : CheetahLoyaltyUI.ListItemCell {
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class OrderProgressViewController : CheetahLoyaltyUI.NibViewController, CheetahLoyaltyOloUI.OrderProgressViewDelegate {
  open var contentViewControllers: [UIKit.UIViewController]
  @objc override dynamic open func viewDidLoad()
  public func selected(view: CheetahLoyaltyOloUI.OrderProgressView)
  open func currentViewController() -> UIKit.UIViewController
  public func completeOrderStep()
  @objc deinit
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class DeliveryPreferencesController : CheetahLoyaltyUI.BaseCollectionController<Any>, UIKit.UICollectionViewDelegateFlowLayout, UIKit.UITextFieldDelegate, CheetahLoyaltyOloUI.TextFieldCollectionViewCellDelegate {
  override open var collectionViewLayout: UIKit.UICollectionViewLayout {
    get
  }
  override open func registerComponents()
  override open func loadContent()
  @objc override open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  public func updateText(textField: CheetahLoyaltyUI.FloatingTextField, value: Swift.String)
  public func updateDate(textField: CheetahLoyaltyUI.FloatingTextField, date: Foundation.Date)
  @objc deinit
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
}
extension DeliveryPreferencesController {
  public func completeDeliveryPreferences()
}
extension Delivery.Address {
  public func getShortAddress() -> Swift.String
}
@_inheritsConvenienceInitializers open class DeliveryPreferencesViewController : CheetahLoyaltyOloUI.FooterButtonCollectionViewController {
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  override open func setupActionButton()
  override open func performAction()
  @objc deinit
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
}
@_inheritsConvenienceInitializers open class ProductCollectionViewCell : CheetahLoyaltyUI.ListItemCell {
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class CardCollectionViewCell : UIKit.UICollectionViewCell {
  open func toggleSelection(selected: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol TextFieldCollectionViewCellDelegate {
  func updateText(textField: CheetahLoyaltyUI.FloatingTextField, value: Swift.String)
  func updateDate(textField: CheetahLoyaltyUI.FloatingTextField, date: Foundation.Date)
}
@objc @_inheritsConvenienceInitializers open class TextFieldCollectionViewCell : UIKit.UICollectionViewCell, UIKit.UITextFieldDelegate {
  open var delegate: CheetahLoyaltyOloUI.TextFieldCollectionViewCellDelegate?
  final public let dateDisplayFormat: Swift.String
  open func setupAsTextField()
  open func setupAsDatePicker()
  @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class PaymentCollectionActionViewCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet weak public var actionLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var caretImageView: UIKit.UIImageView!
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct CreditCard {
}
@_inheritsConvenienceInitializers open class CreditCardViewController : CheetahLoyaltyUI.NibViewController, UIKit.UITextFieldDelegate {
  @objc @IBOutlet weak public var creditCardView: UIKit.UIView!
  @objc @IBOutlet weak public var cvvLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var cardDividerView: UIKit.UIView!
  @objc @IBOutlet weak public var cardTypeImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var cardNumberLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var monthYearLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var expirationLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var showCreditCardScannerButton: UIKit.UIButton!
  @objc @IBOutlet weak public var cardNumberFloatingTextField: CheetahLoyaltyUI.FloatingTextField!
  @objc @IBOutlet weak public var cardExpirationFloatingTextField: CheetahLoyaltyUI.FloatingTextField!
  @objc @IBOutlet weak public var cvvFloatingTextField: CheetahLoyaltyUI.FloatingTextField!
  @objc @IBOutlet weak public var zipCodeFloatingTextField: CheetahLoyaltyUI.FloatingTextField!
  @objc @IBOutlet weak public var checkBox: CheetahLoyaltyUI.CheckBox!
  @objc @IBOutlet weak public var addAndPayButton: UIKit.UIButton!
  @objc @IBOutlet weak public var addButton: UIKit.UIButton!
  open var amount: Swift.Double?
  public var didTapActionButton: ((Swift.Int, CheetahLoyaltyOloUI.CreditCard) -> Swift.Void)?
  convenience public init(amount: Swift.Double?)
  override open func setup()
  open func setupViews()
  open func setupLabels()
  open func setupFloatingTextFields()
  open func setupButtons()
  open func showCreditCardScannerButtonPressed(_ sender: UIKit.UIButton)
  open func addAndPayButtonPressed(_ sender: UIKit.UIButton)
  open func addButtonPressed(_ sender: UIKit.UIButton)
  @objc open func textFieldDidChange(_ textField: UIKit.UITextField)
  @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  public func formatCreditCardNumber(currentText: Swift.String, textField: UIKit.UITextField, range: Swift.Range<Swift.String.Index>, string: Swift.String) -> Swift.Bool
  public func formatExpirationDate(currentText: Swift.String, textField: UIKit.UITextField, range: Swift.Range<Swift.String.Index>, string: Swift.String) -> Swift.Bool
  public func expDateValidation(dateStr: Swift.String, textField: UIKit.UITextField)
  @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc deinit
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class RestaurantsCollectionViewController : CheetahLoyaltyUI.CollectionViewController, CheetahLoyaltyOloUI.OrderProgressCompletable {
  convenience public init(nibName: Swift.String, collectionController: CheetahLoyaltyUI.CollectionController?)
  @objc deinit
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
}
@_inheritsConvenienceInitializers open class RestaurantListCollectionController : CheetahLoyaltyUI.ListCollectionController<CheetahLoyaltyOloCore.Restaurant>, CoreLocation.CLLocationManagerDelegate {
  open var selectedRestaurantId: Swift.Int?
  open var selectedRadioButton: CheetahLoyaltyUI.RadioButton?
  open var loadNearbyRestaurantsOnly: Swift.Bool
  open var radiusMiles: Swift.Double
  open var locationManager: CoreLocation.CLLocationManager
  open var restaurantLimit: Swift.Int
  convenience public init(loadNearbyRestaurantsOnly: Swift.Bool = false, radiusMiles: Swift.Double = 5.0, restaurantLimit: Swift.Int = 10)
  override open func setupCollectionView()
  override open func registerComponents()
  override open func loadContent()
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  override open func filteredData(with searchTerm: Swift.String) -> [CheetahLoyaltyOloCore.Restaurant]
  @objc override open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc open func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
  @objc deinit
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
}
public struct GiftCard {
}
@_inheritsConvenienceInitializers open class GiftCardViewController : CheetahLoyaltyUI.NibViewController, CheetahLoyaltyUI.AlertEmbeddableViewController {
  @objc @IBOutlet weak public var buttonStackView: UIKit.UIStackView!
  @objc @IBOutlet weak public var checkBox: CheetahLoyaltyUI.CheckBox!
  @objc @IBOutlet weak public var addAndPayButton: UIKit.UIButton!
  @objc @IBOutlet weak public var addButton: UIKit.UIButton!
  @objc @IBOutlet weak public var giftCardFloatingTextField: CheetahLoyaltyUI.FloatingTextField!
  @objc @IBOutlet weak public var closeButton: UIKit.UIButton!
  public var didTapActionButton: ((Swift.Int, CheetahLoyaltyOloUI.GiftCard) -> Swift.Void)?
  open var amount: Swift.Double?
  open var delegate: CheetahLoyaltyUI.AlertEmbeddableViewControllerDelegate?
  convenience public init(amount: Swift.Double?)
  override open func setup()
  open func setupButtons()
  open func setupCheckBox()
  open func setupFloatingTextField()
  @objc deinit
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class ProductDetailCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet public var headingLabel: UIKit.UILabel!
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class ProductCustomizationCollectionController : CheetahLoyaltyOloUI.ProductOptionsCollectionController, CheetahLoyaltyOloUI.ProductOptionsViewControllerDelegate {
  open var selectedOptions: [Swift.Int : [Swift.Int]]
  open var selectedSubOptions: [Swift.Int : Any]
  open var productQuantity: Swift.Int
  open var product: CheetahLoyaltyOloCore.Product?
  open var productId: Swift.Int!
  open var isBasketUpdate: Swift.Bool
  open var basketUpdateOptionIds: [Swift.Int]?
  open var specialInstructions: Swift.String
  open var additionalSections: Swift.Int {
    get
  }
  override open func loadContent()
  override open func registerComponents()
  override open func totalSection() -> Swift.Int
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
  open func setupProducOptionCell(_ cell: CheetahLoyaltyOloUI.ProductOptionCollectionViewCell, indexPath: Foundation.IndexPath) -> CheetahLoyaltyOloUI.ProductOptionCollectionViewCell
  open func isOptionType(section: Swift.Int) -> Swift.Bool
  public func didUpdateOption(_ option: CheetahLoyaltyOloCore.Product.Option, with subOptions: [Swift.Int : [CheetahLoyaltyOloCore.Product.Option]]?)
  open func basketSelectedOptionsParameters() -> Swift.String
  open func setSelectedOptionsFromBasketUpdate()
  open func setDefaultSelectedOptions()
  @objc deinit
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
}
public enum OLOUINotification : CheetahLoyaltyUtils.CheetahNotification {
  case restaurantChanged
  case orderPlaced
  public var name: Swift.String {
    get
  }
  public static func == (a: CheetahLoyaltyOloUI.OLOUINotification, b: CheetahLoyaltyOloUI.OLOUINotification) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers open class FooterButtonCollectionViewController : CheetahLoyaltyUI.CollectionViewController, CheetahLoyaltyOloUI.OrderProgressCompletable {
  @objc @IBOutlet public var actionButton: UIKit.UIButton!
  convenience public init(nibName: Swift.String, collectionController: CheetahLoyaltyUI.CollectionController?)
  override open func setup()
  open func setupActionButton()
  open func showActionButton(_ show: Swift.Bool)
  open func enableActionButton(_ enable: Swift.Bool)
  open func performAction()
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
  @objc deinit
}
@_inheritsConvenienceInitializers open class ProductCollectionController : CheetahLoyaltyUI.BaseCollectionController<CheetahLoyaltyOloCore.Product>, UIKit.UICollectionViewDelegateFlowLayout {
  open var imagePath: Swift.String?
  open var imageGroupName: Swift.String?
  convenience public init(products: [CheetahLoyaltyOloCore.Product], imagePath: Swift.String?, imageGroupName: Swift.String? = nil)
  override open func loadContent()
  override open var collectionViewLayout: UIKit.UICollectionViewLayout {
    get
  }
  override open func registerComponents()
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
  @objc deinit
}
public protocol CreditCardScanner {
  func openScanner(in viewController: CheetahLoyaltyOloUI.CreditCardViewController)
}
public enum CreditCardScannerLoader {
  public static var scanner: CheetahLoyaltyOloUI.CreditCardScanner?
  public static var creditCardViewController: CheetahLoyaltyOloUI.CreditCardViewController?
}
@_inheritsConvenienceInitializers open class BasketCollectionController : CheetahLoyaltyUI.ListCollectionController<CheetahLoyaltyOloCore.Basket.Product>, CheetahLoyaltyOloUI.BasketItemCollectionViewCellDelegate {
  open var basket: CheetahLoyaltyOloCore.Basket?
  override open func loadContent()
  override open var collectionViewLayout: UIKit.UICollectionViewLayout {
    get
  }
  override open func registerComponents()
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  open func updateTotalCost()
  open func editBasketItemCollectionViewCell(_ cell: CheetahLoyaltyOloUI.BasketItemCollectionViewCell)
  open func removeBasketItemCollectionViewCell(_ cell: CheetahLoyaltyOloUI.BasketItemCollectionViewCell)
  open func updateBasketItemQuantity(_ cell: CheetahLoyaltyOloUI.BasketItemCollectionViewCell, quantity: Swift.Int)
  open func deleteProductFromBasket(indexPath: Foundation.IndexPath, product: CheetahLoyaltyOloCore.Basket.Product)
  @objc deinit
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
}
@objc @_inheritsConvenienceInitializers open class HeaderCollectionViewCell : UIKit.UICollectionViewCell {
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol BasketItemCollectionViewCellDelegate {
  func removeBasketItemCollectionViewCell(_ cell: CheetahLoyaltyOloUI.BasketItemCollectionViewCell)
  func editBasketItemCollectionViewCell(_ cell: CheetahLoyaltyOloUI.BasketItemCollectionViewCell)
  func updateBasketItemQuantity(_ cell: CheetahLoyaltyOloUI.BasketItemCollectionViewCell, quantity: Swift.Int)
}
@_inheritsConvenienceInitializers open class BasketItemCollectionViewCell : CheetahLoyaltyUI.ListItemCell {
  open var quantity: Swift.Int {
    get
    set
  }
  @objc override dynamic open func awakeFromNib()
  open func setupGestureRecognizers()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class BasketViewController : CheetahLoyaltyOloUI.FooterButtonCollectionViewController {
  @objc @IBOutlet public var totalCostLabel: UIKit.UILabel!
  @objc @IBOutlet public var footerSeparatorView: UIKit.UIView!
  override open func setup()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
}
@_inheritsConvenienceInitializers open class PaymentCollectionController : CheetahLoyaltyUI.ListCollectionController<Any>, UIKit.UICollectionViewDelegateFlowLayout {
  open var basket: CheetahLoyaltyOloCore.Basket? {
    get
    set
  }
  open var paymentCheckoutCollectionController: CheetahLoyaltyOloUI.PaymentCheckoutCollectionController?
  open func actionButtonPressed()
  open func showAvailableOffersCellPressed()
  open func showCouponsCellPressed()
  override open var collectionViewLayout: UIKit.UICollectionViewLayout {
    get
  }
  override open func registerComponents()
  override open func loadContent()
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @objc override open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
  @objc deinit
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
}
@_inheritsConvenienceInitializers open class PaymentCheckoutCollectionController : CheetahLoyaltyUI.ListCollectionController<Any>, UIKit.UICollectionViewDelegateFlowLayout, CheetahLoyaltyOloUI.BillingAccountCellDelegate, CheetahLoyaltyUI.SelectionButtonDelegate {
  open var basket: CheetahLoyaltyOloCore.Basket?
  open var billingSchemes: [CheetahLoyaltyOloCore.Billing.Scheme]
  open var loading: CheetahLoyaltyUI.AlertViewController
  open var textFieldAmounts: [Swift.Int : Swift.String]
  open var isPaymentSplitted: Swift.Bool {
    get
    set
  }
  open var selectedAccountsToUse: [Swift.Int]
  open var totalAmount: Swift.Double {
    get
  }
  open var creditCardViewController: CheetahLoyaltyOloUI.CreditCardViewController?
  open var giftCardViewController: CheetahLoyaltyOloUI.GiftCardViewController?
  public static let orderStatusKey: Swift.String
  override open var collectionViewLayout: UIKit.UICollectionViewLayout {
    get
  }
  open func didTap(_ selectionButton: CheetahLoyaltyUI.SelectionButton)
  open func actionButtonPressed(_ sender: Any)
  open func billingAccountDeleted(_ cell: CheetahLoyaltyOloUI.BillingAccountCollectionViewCell)
  open func amountTextFieldDidEndEditing(_ textField: UIKit.UITextField, parent cell: CheetahLoyaltyOloUI.BillingAccountCollectionViewCell)
  override open func loadContent()
  override open func refreshContent()
  override open func registerComponents()
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc override open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
  @objc deinit
}
@_inheritsConvenienceInitializers open class PaymentCheckoutCollectionViewController : CheetahLoyaltyUI.CollectionViewController {
  convenience public init(nibName: Swift.String, collectionController: CheetahLoyaltyUI.CollectionController?)
  override open func setup()
  open func actionButtonPressed(_ sender: Any)
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
  @objc deinit
}
@_inheritsConvenienceInitializers open class RestaurantListCell : CheetahLoyaltyUI.ListItemCell {
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class PaymentCollectionViewController : CheetahLoyaltyOloUI.FooterButtonCollectionViewController {
  override open func setup()
  override open func performAction()
  @objc deinit
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
}
@_inheritsConvenienceInitializers open class RestaurantScheduleViewController : CheetahLoyaltyUI.CollectionViewController {
  convenience public init(nibName: Swift.String, collectionController: CheetahLoyaltyUI.CollectionController?)
  override open func setup()
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
  @objc deinit
}
@_inheritsConvenienceInitializers open class RestaurantScheduleCollectionController : CheetahLoyaltyUI.ListCollectionController<CheetahLoyaltyOloCore.Restaurant.CalendarTimeRange> {
  open var calendars: [CheetahLoyaltyOloCore.Restaurant.Calendar]
  open var restaurant: CheetahLoyaltyOloCore.Restaurant? {
    get
    set
  }
  open var startDate: Swift.String {
    get
  }
  open var endDate: Swift.String {
    get
  }
  override open var collectionViewLayout: UIKit.UICollectionViewLayout {
    get
  }
  open func callRestaurantButtonPressed(_ sender: UIKit.UIButton)
  open func getDirectionsButtonPressed(_ sender: UIKit.UIButton)
  open func segmentedControlValueChanged(_ sender: UIKit.UISegmentedControl)
  override open func registerComponents()
  override open func loadContent()
  override open func refreshContent()
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc override open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ButtonCollectionViewCell : UIKit.UICollectionViewCell {
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class ProductQuantityCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet public var minusImageView: UIKit.UIImageView!
  @objc @IBOutlet public var addImageView: UIKit.UIImageView!
  @objc @IBOutlet public var quantityLabel: UIKit.UILabel!
  open var didUpdateQuantity: ((Swift.Int) -> Swift.Void)?
  open var quantity: Swift.Int {
    get
    set
  }
  @objc override dynamic open func awakeFromNib()
  open func addGestureRecognizers()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol OrderProgressViewDelegate {
  func selected(view: CheetahLoyaltyOloUI.OrderProgressView)
}
public protocol OrderProgressCompletable {
  func markOrderStepAsCompleted(parameters: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class OrderProgressView : UIKit.UIView {
  @objc @IBOutlet public var leadingLineView: UIKit.UIView!
  @objc @IBOutlet public var trailingLineView: UIKit.UIView!
  @objc @IBOutlet public var stateImageView: UIKit.UIImageView!
  @objc @IBOutlet public var stateLabel: UIKit.UILabel!
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  open func setup()
  @objc deinit
}
public enum OloOrdering {
  public static func oloProgressViewController() -> CheetahLoyaltyOloUI.OrderProgressViewController
}
extension OrderProgressCompletable where Self : UIKit.UIViewController {
  public func markOrderStepAsCompleted(parameters: [Swift.String : Any]?)
}
@_inheritsConvenienceInitializers open class ProductCustomizationViewController : CheetahLoyaltyOloUI.FooterButtonCollectionViewController {
  open var isBasketUpdate: Swift.Bool
  open var basketProduct: CheetahLoyaltyOloCore.Basket.Product?
  convenience public init(isBasketUpdate: Swift.Bool, product: CheetahLoyaltyOloCore.Product? = nil, basketProduct: CheetahLoyaltyOloCore.Basket.Product? = nil, basketUpdateOptionIds: [Swift.Int]? = nil, collectionController: CheetahLoyaltyOloUI.ProductCustomizationCollectionController? = ProductCustomizationCollectionController())
  override open func setupActionButton()
  override open func performAction()
  open func showAddToCartError(_ error: Swift.Error)
  open func addToCart(_ selectedOptions: Swift.String, productId: Swift.Int, instructions: Swift.String, quantity: Swift.Int)
  open func updateProductInBasket(_ parameter: CheetahLoyaltyOloCore.BasketParameter.Product!)
  open func addProductToBasket(_ parameter: CheetahLoyaltyOloCore.BasketParameter.Product!)
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
  @objc deinit
}
@_inheritsConvenienceInitializers open class ProductSubCustomizationCollectionController : CheetahLoyaltyOloUI.ProductOptionsCollectionController {
  open var option: CheetahLoyaltyOloCore.Product.Option!
  open var selectedSubOptions: [Swift.Int : [CheetahLoyaltyOloCore.Product.Option]]
  open var basketUpdateOptionIds: [Swift.Int]?
  override open func loadContent()
  override open func registerComponents()
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc override open func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
  open func setSelectedOptionsFromBasketUpdate()
  open func setDefaultSelectedOptions()
  open func updateMandatoryFieldsFromPreSelectedOptions()
  @objc deinit
  @objc override dynamic public init()
  override public init(collectionView: UIKit.UICollectionView? = super)
}
@objc @_inheritsConvenienceInitializers open class PaymentDisplayCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet weak public var headingLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var subHeadingLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var dividerView: UIKit.UIView!
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class ProductOptionCollectionViewCell : UIKit.UICollectionViewCell, CheetahLoyaltyUI.SelectionButtonDelegate {
  @objc @IBOutlet public var checkBox: CheetahLoyaltyUI.CheckBox!
  @objc @IBOutlet public var caretImage: UIKit.UIImageView!
  @objc @IBOutlet public var subheadingLabel: UIKit.UILabel!
  open var didSelectCheckBox: ((CheetahLoyaltyOloUI.ProductOptionCollectionViewCell) -> Swift.Void)?
  @objc override dynamic open func awakeFromNib()
  public func didTap(_ selectionButton: CheetahLoyaltyUI.SelectionButton)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class ProductOptionHeaderCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet public var headingLabel: UIKit.UILabel!
  @objc @IBOutlet public var separatorView: UIKit.UIView!
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol ProductOptionsViewControllerDelegate {
  func didUpdateOption(_ option: CheetahLoyaltyOloCore.Product.Option, with subOptions: [Swift.Int : [CheetahLoyaltyOloCore.Product.Option]]?)
}
@_inheritsConvenienceInitializers open class ProductSubCustomizationViewController : CheetahLoyaltyOloUI.FooterButtonCollectionViewController {
  open var delegate: CheetahLoyaltyOloUI.ProductOptionsViewControllerDelegate?
  convenience public init(option: CheetahLoyaltyOloCore.Product.Option, selectedSubOptions: [Swift.Int : [CheetahLoyaltyOloCore.Product.Option]]? = nil, basketUpdateOptionIds: [Swift.Int]? = nil, collectionController: CheetahLoyaltyOloUI.ProductSubCustomizationCollectionController? = ProductSubCustomizationCollectionController())
  override open func setupActionButton()
  override open func performAction()
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  override public init(collectionController: CheetahLoyaltyUI.CollectionController?)
  override public init(controller: CheetahLoyaltyUI.ContentController?, loading: CheetahLoyaltyUI.LoadableViewController? = super, empty: CheetahLoyaltyUI.ReloadableViewController? = super, error: CheetahLoyaltyUI.ReloadableViewController? = super)
  @objc deinit
}
@_inheritsConvenienceInitializers open class DeliveryAddressViewController : CheetahLoyaltyUI.NibViewController, CheetahLoyaltyUI.AlertEmbeddableViewController, UIKit.UITextFieldDelegate {
  open var delegate: CheetahLoyaltyUI.AlertEmbeddableViewControllerDelegate?
  open var completeAction: ((CheetahLoyaltyOloCore.Basket) -> Swift.Void)?
  open var phoneNumber: Swift.String?
  open var deliveryMode: CheetahLoyaltyOloCore.Delivery.Mode
  override open func setup()
  @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc override dynamic public init()
  override public init(nibName: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CheetahLoyaltyOloUI.OLOUINotification : Swift.Equatable {}
extension CheetahLoyaltyOloUI.OLOUINotification : Swift.Hashable {}
